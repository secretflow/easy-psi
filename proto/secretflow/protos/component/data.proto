// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.component;

import "google/protobuf/any.proto";

option java_package = "org.secretflow.proto.component";


// Describe the application underlying the data
message SystemInfo {
  // The application name. i.e. Secretflow/SCQL etc.
  // Supported: Secretflow
  string app_name = 1;


  // SCQL, GRM related meta information should be here.
  // You can add more field here, when a new type of application is added.
}

// NOTE: A col is by default a feature.
// A col must be one of id / feature / label. By default, it should be a
// feature.
// All names must match the regexp "[A-Za-z0-9.][A-Za-z0-9_>./]*"
// All ata type must be one of component.data_utils.SUPPORTED_VTABLE_DATA_TYPE.
message TableSchema {
  // table's id column(s) name
  // optional, can be empty
  repeated string ids = 1;

  // table's feature column(s) name
  repeated string features = 2;

  // table's label column(s) name
  // optional, can be empty
  repeated string labels = 3;

  // id column(s) data type
  // len(id) should match len(id_types)
  repeated string id_types = 4;

  // feature column(s) data type
  // len(features) should match len(feature_types)
  repeated string feature_types = 5;

  // label column(s) data type
  // len(labels) should match len(label_types)
  repeated string label_types = 6;
}

// First-party Data Types.
// Used to fill in meta in DistData.

// Table describes a vertical virtual table from multiple-parties.
// TODO: move this to secretflow/protos/builtin/
// Guide: if some type is only required to be handle inside a specific system,
// for instance woe.rule file in engine, we dont need to define a new type here.
message VerticalTable {
  // The virtical splitted slices' schema.
  // Matches data_refs in parent DistData message.
  repeated TableSchema schemas = 1;

  // If -1, the number is unknown, else the number of lines.
  int64 num_lines = 2;
}

message IndividualTable {
  TableSchema schema = 1;

  // If -1, the number is unknown, else the number of lines.
  int64 num_lines = 2;
}

message DeviceObjectCollection {
  message DeviceObject {
    // spu / pyu
    string type = 1;
    // save on which data_ref
    repeated int32 data_ref_idxs = 2;
  }

  repeated DeviceObject objs = 1;

  string public_info = 2;
}

// A public record for any distributed data stucture.
message DistData {
  // The name of this distributed data.
  string name = 1;

  // The type of this distributed data, should be meanful to components.
  // The concreate data format (include public and private part) is defined by
  // other protos.
  //
  // Suggested names, i.e.
  // - sf.table.vertical_table      represent a secretflow vertical table
  // - sf.model.*                   represent a secretflow models.
  // - sf.rule.*                    represent a secretflow rules.
  string type = 2;

  // Describe the system information that used to generate this distributed
  // data.
  SystemInfo sys_info = 3;

  // Public information, known to all parties.
  // i.e. secretflow.protos.VerticalTable
  google.protobuf.Any meta = 4;

  // A reference to a data that is stored in the remote path.
  message DataRef {
    // The path infomation.
    string uri = 1;

    // The party's id or ownership.
    string party = 2;

    // the storage format, i.e. csv.
    string format = 3;
  }

  // Remote data references.
  repeated DataRef data_refs = 5;
}